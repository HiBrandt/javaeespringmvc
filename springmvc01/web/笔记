package springmvc01;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

/**
 *
 *
 * springMVC的搭建过程：
 * 1.导入jar
 * 2.在web.xml中配置springMVC的核心（前端）控制器DispatcherServlet:
 *    <servlet>
       <servlet-name>springMVC</servlet-name>
       <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      </servlet>
     <servlet-mapping>
      <servlet-name>springMVC</servlet-name>
     <url-pattern>/</url-pattern>
    作用:加载springMVC的配置文件，上面的配置内容解读：加载的配置文件 位置：WEB-INF下 名称：<servlet-name>-servlet.xml,
    例如以下配置方式的文件名：springMVC-servlet.xml,当加载了配置文件，springMVC就会根据扫描组件找到控制层
   3.创建一个POJO，在此类上加上@Controller注解，springMVC就会将此类作为控制层加载，让其处理请求响应
   4.在控制层中，需要在方法上设置@RequestMapping(value="xxx")
      springMVC就是通过此注解将请求路径与控制层中的方法进行匹配，此时请求路径为localhost:8080/projectName/xxx
   5.处理请求的方法会返回一个字符串，即视图名称，最终会通过配置文件中配置的视图解析器实现页面跳转
     跳转地址：prefix + 视图名称 + suffix ，此为最终跳转的页面路径

     ①	一般情况下，控制器方法返回字符串类型的值会被当成逻辑视图名处理
     ②	如果返回的字符串中带 forward: 或 redirect: 前缀时，SpringMVC 会对他们进行特殊处理：将 forward: 和 redirect: 当成指示符，其后的字符串作为 URL 来处理
     ③	redirect:success.jsp：会完成一个到 success.jsp 的重定向的操作
     ④	forward:success.jsp：会完成一个到 success.jsp 的转发操作

 *
 *
 *
 **/
@Controller
public class StudyMvc01 {

    @RequestMapping(value="")
    public String name() {

        System.out.println("Success");
        return "success";
    }
}
